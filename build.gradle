plugins {
    // Provide convenience executables for trying out the examples.
    id 'application'
    // ASSUMES GRADLE 2.12 OR HIGHER. Use plugin version 0.7.5 with earlier gradle versions
    id 'com.google.protobuf' version '0.8.8'
    // Generate IntelliJ IDEA's .idea & .iml project files
    id 'idea'
}

repositories {
    maven { // The google mirror is less flaky than mavenCentral()
        url "https://maven-central.storage-download.googleapis.com/maven2/" }
    mavenCentral()
    mavenLocal()
}

targetCompatibility='1.8'
sourceCompatibility='1.8'

// Feel free to delete the comment at the next line. It is just for safely
// updating the version in our release process.
def grpcVersion = '1.32.1' // CURRENT_GRPC_VERSION
def protobufVersion = '3.12.0'
def protocVersion = protobufVersion

dependencies {
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    compileOnly "org.apache.tomcat:annotations-api:6.0.53"

    // examples/advanced need this for JsonFormat
    implementation "com.google.protobuf:protobuf-java-util:${protobufVersion}"

    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'

    runtimeOnly "io.grpc:grpc-netty-shaded:${grpcVersion}"

    testImplementation "io.grpc:grpc-testing:${grpcVersion}"
    testImplementation "junit:junit:4.12"
    testImplementation "org.mockito:mockito-core:2.28.2"
}

protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
        resources {
            srcDirs 'src/main/resources'
        }
    }
}


startScripts.enabled = false

task brokerServer(type: CreateStartScripts) {
    mainClassName = 'pt.nunogneto.trabalho.server.BrokerServer'
    applicationName = 'broker-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task publisherClient(type: CreateStartScripts) {
    mainClassName = 'pt.nunogneto.trabalho.client.PublisherClient'
    applicationName = 'publisher-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task subscriberClient(type: CreateStartScripts) {
    mainClassName = 'pt.nunogneto.trabalho.client.SubscriberClient'
    applicationName = 'subscriber-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(brokerServer)
    from(publisherClient)
    from(subscriberClient)
    fileMode = 0755
}
